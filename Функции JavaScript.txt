Math . pow( 2, 53.)  // => 90071992547 40992 , степень
Math . round( . 6)  // => 1 . 0, округление до ближайшего
Math . ceil ( . 6)  // => 1 . 0, округление вверх
Math . floor( . 6)  // => О . О, округление вниз
Math . abs( -5)  // => 5, абсолютное значение
Math . max(x, y, z)  // максимальный аргумент
Math . min(x, y, z)  // минимальный аргумент
Math . random( )  // псевдослучайное число О<=х<1 . 0
Math . PI  // число р
Math . E  // число е
Math . sq rt ( 3 )  // квадратный корень
Math . pow(3 , 1/3 ) // возведение в дробную степень
Math . sin(O)  // синус
Math . log( 10 )  // натуральный логарифм десяти
Math . log( 100)/Math . LN10 // логарифм по основанию 1 0
Math . log(512)/Math . LN2 // логарифм п о основанию 2
Math . exp(3)  // экспонента

isNaN(  ), которая возвращает
t rue,  если аргумент равен  NaN  или является нечисловым
значением, т.е. строкой (или объектом), которую нел ьзя
преобразовать в число. Аналогичная функция  isFinite()
возвращает  true,  если аргумент является числом, отлич­
ным от  NaN, Infinity  или  -Infinity.



Табnица  2.1.  С пециаnьные посnедоватеnьности  JavaScript
Посnедоваtuьность  Представмемыi  а�мвоn
\О  Символ  NUL  ( \uOOOO);  не путайте  с  null
\b  Клавиша возврата (Backspace,  \u0008)
\t
\n
\v
\f
\r
\"
\ '
\\
\х ХХ  Символ latin-1, представленный двумя шестнадцатеричными
цифрами
\uXXX  Символ Unicode, представленный четырьмя
шестнадцатеричными цифрами

Для выяснения длины строки (количества хранящих­
ся в ней 16-битовых значений) используется свойство
length  объекта строки. 

Кроме свойства  length,  объект строки имеет ряд мето­
дов, примеры которых приведены ниже.
var s = "слова для теста" // создание строки

s . charAt(0)"с"  первый СИМВОЛ
s . charAt(s. length- 1 )"а"  последний символ
s . substriпg ( 1 , 4)символы 2, 3 и 4
s . slice( 1 , 4)ТО  же
s . slice(-3)последние три символа
s . i ndexOf  (''l")позиция символа л
s . lasti пdexOf( "a" )позиция последнего а
s . iпdexOf( "a"  3 )позиция а после 3-й
s . split (", " )слова"  для "  теста
s . replace(" c" ,  "С")Слова для те с та
s . toUpperCase( ) "СЛОВА ДЛЯ ТЕСТА"
s = "два слова
s[O]  // => д
s[s. leпgth- 1 ] // => "а"


undefined null 0 -0 NaN пустая строка - false 

Boolean( ), Number( ), String( )
и Object( ).
Number( "З" )11  = >  3
String ( false)// = >  " false"  Можно также написать false.toStriпg( )
Boolean( [ ] ) // = >  true
Object (З)// = >  new Number(З)


alert( +"2" > +"14" ); -> alert(2 > 14) плюс преобразует строку в число 


При сравнении значений разных типов, используется числовое преобразование. Оно применяется к обоим значениям.

alert( '2' > 1 ); // true, сравнивается как 2 > 1
alert( '01' == 1 ); // true, сравнивается как 1 == 1
alert( false == 0 ); // true, false становится числом 0
alert( true == 1 ); // true, так как true становится числом 1

Значения null и undefined равны == друг другу и не равны чему бы то ни было ещё. 
Это жёсткое правило буквально прописано в спецификации языка.

Итого

В JavaScript есть логические значения true (истина) и false (ложь). Операторы сравнения возвращают их.
Строки сравниваются побуквенно.
Значения разных типов приводятся к числу при сравнении, за исключением строгого равенства === (!==).
Значения null и undefined равны == друг другу и не равны ничему другому. В других сравнениях (с участием >,<)
 их лучше не использовать, так как они ведут себя не как 0.










