Moment.js это отличная библиотека для работы с датами в JavaScript. Примеры под катом.

var now = moment();
moment.lang('ru');
console.log(now.format('dddd, MMMM DD YYYY, h:mm:ss'));
// вторник, ноябрь 15 2011, 3:31:03


var halloween = moment([2011, 9, 31]); // October 31st
moment.lang('ru');
console.log(halloween.fromNow());
// 16 дней назад


var now = moment().add('days', 9);
moment.lang('ru');
console.log(now.format('dddd, MMMM DD YYYY'));
// четверг, ноябрь 24 2011


var now = moment();
moment.lang('ru');
console.log(now.format('LLLL'));
// вторник, 15 ноябрь 2011 15:27


Ну и собственно ссылки:

http://momentjs.com/
https://github.com/timrwood/moment

Работа с датой и временем с помощью Moment.js

Работа с датой и временем зачастую весьма обременительна. Я всегда считал, что отдельная JavaScript библиотека для манипуляции датами была бы очень полезной. Не так давно я познакомился с замечательной библиотекой Moment.js, позволяющей валидировать, парсить и управлять датами и временем.
Начинаем работу с Moment.js

Чтобы использовать Moment.js в браузере, скачайте скрипт и подключите его на странице с помощью тега script, как показано в следующем примере. Moment.js определяет глобальный объект moment, который может быть использован для доступа ко всему функционалу парсинга и манипуляции.
01
<html>
02
  <head>
03
    <script src="moment.js"></script>
04
    <script>
05
      moment().format();
06
    </script>
07
  </head>
08
  <body>
09
  </body>
10
</html>
Форматирование дат

Ранее я конвертировал строки с датам в объекты Date, выбирая из него индивидуальные составляющие, и собирая их в единую строку. Moment.js упростил процесс конвертации дат в любой необходимый формат. Конвертация дат в различные форматы довольно проста, это показано в следующем примере:
1
moment().format('YYYY MM DD');
moment() возвращает текущую дату и время, а format() конвертирует текущую дату и время в указанный формат. В данном примере дата содержит четырехсимвольный год, двухсимвольный месяц, и двухсимвольный день месяца, все разделено пробелами. Код в действии можно посмотреть на следующей демо-странице.

Валидация дат

Еще одну раздражающую задачу можно упростить с помощью Moment.js - задачу валидации дат. Чтобы проверить на правильность даты, просто передайте строку с датой вместе с форматом в объект moment, и вызовите метод isValid(). Этот метод возвращает true если дата верна, и false в противном случае. Ниже показан пример проверки, также можно просмотреть соответствующее демо.
1
var dateEntered = $('#txtEnteredDate').val();
2
 
3
if (!moment(dateEntered,'MM-DD-YYYY').isValid()) {
4
  console.log('Invalid Date');
5
} else {
6
  console.log('Valid Date');
7
}
В объекте, возвращенном функцией moment() есть ряд полезных флагов:
overflow - устанавливается, если возникло переполнение. Например, если указан 13 месяц или 32 день месяца.
invalidMonth - устанавливается, если передан неверный месяц.
empty - устанавливается, если переданная строка не содержит дату, которую можно разобрать
nillInput - устанавливается, когда передан null
Манипулирование датами

Существует ряд возможностей управления объектом moment. Например, вы можете прибавлять или вычитать дни, месяцы, года, и т.д. Это можно сделать с помощью методов add() и subtract(). Следующий пример показывает, как можно прибавить к дате семь дней, месяцев или недель.
1
moment().add('days', 7);    // прибавляет к текущей дате 7 дней
2
moment().add('months', 7);  // прибавляет текущей дате 7 месяцев
3
moment().add('years', 7);   // прибавляет к текущей дате 7 лет
То же самое с методом subtract():
1
moment().subtract('days', 7);   // вычитает из текущей даты 7 дней
2
moment().subtract('months', 7); // вычитает 7 месяцев из текущей даты
3
moment().subtract('years', 7);  // вычитает 7 лет из текущей даты
Сколько прошло времени с текущего момента

Еще одной распространенной задачей является определение количества времени, которое прошло между двумя датами. Для расчета разницы с текущей датой в Moment.js есть метод fromNow(). Вот простой пример, который проверит, сколько прошло времени с текущего момента:
1
moment().fromNow();
Этот пример выведет “a fiew seconds ago” (несколько секунд назад). Если передать дату в объект moment, пример выведет, сколько прошло времени между текущей и указанной датой. Например, следующий код выведет “7 days ago” (7 дней назад)
1
var dateA = moment().subtract('days', 7);
2
dateA.fromNow();
Сколько времени прошло между двумя произвольными датами

Метод fromNow() используется для сравнения указанной даты с текущим временем. Это всего лишь особый случай метода from(), который сравнивает две произвольные даты. Ниже показан пример использования метода from(). Этот код выведет “in a day” (“в течении дня”). Код в действии можно посмотреть на демо-странице.

1
var dateB = moment('2014-12-12');
2
var dateC = moment('2014-12-11');
3
 
4
console.log(dateB.from(dateC));
Вычисляем разницу между двумя датами

Moment.js предоставляет возможность вычисления разницы между двумя датами. ПО умолчанию разница считается в миллисекундах, но также может быть возвращена в днях, месяцах, годах и прочее. Для вычисления разницы воспользуйтесь методом diff(). Первым аргументом он принимает дату. Размерность промежутка может быть указана вторым аргументом. Если он не указан, то по умолчанию используются миллисекунды. Следующий пример и демо показывают использование метода diff().1

1
var dateB = moment('2014-11-11');
2
var dateC = moment('2014-10-11');
3
 
4
console.log('Разница в ', dateB.diff(dateC), 'миллисекунд');
5
console.log('Разница в ', dateB.diff(dateC, 'days'), 'дней');
6
console.log('Разница в ', dateB.diff(dateC, 'months'), 'месяцев');
Сравнение дат

Moment.js также предоставляет методы для сравнения дат - isBefore(), isAfter() и isSame(). Соответственно своим названиям, они возвращают булево значение, если одна из дат была до, после, или же они равны. Пример использования isAfter() показан ниже.
1
console.log(moment('2010-09-20').isAfter('2010-10-19')); // возвращает false
2
console.log(moment('2010-11-20').isAfter('2010-10-19')); // возвращает true
Поддержка интернационализации

Moment.js также предоставляет ряд возможностей для поддержки других языков. Вы можете указать используемый язык глобально, или же для конкретного объекта moment. По умолчанию, Moment.js поддерживает английский язык. Если вам нужна поддержка другого языка, то нужно указать соответствующие значения в объекте настройки в moment.lang. Следующий пример, взятый из документации к Moment.js, как добавить поддержку французского языка.
view sourceprint?
01
moment.lang('fr', {
02
  months: 'janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre'.split('_'),
03
  monthsShort: 'janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.'.split('_'),
04
  weekdays: 'dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi'.split('_'),
05
  weekdaysShort: 'dim._lun._mar._mer._jeu._ven._sam.'.split('_'),
06
  weekdaysMin: 'Di_Lu_Ma_Me_Je_Ve_Sa'.split('_'),
07
  longDateFormat: {
08
    LT: 'HH:mm',
09
    L: 'DD/MM/YYYY',
10
    LL: 'D MMMM YYYY',
11
    LLL: 'D MMMM YYYY LT',
12
    LLLL: 'dddd D MMMM YYYY LT'
13
  },
14
  calendar: {
15
    sameDay: '[Aujourdhui à] LT',
16
    nextDay: '[Demain à] LT',
17
    nextWeek: 'dddd [à] LT',
18
    lastDay: '[Hier à] LT',
19
    lastWeek: 'dddd [dernier à] LT',
20
    sameElse: 'L'
21
  },
22
  relativeTime: {
23
    future: 'dans %s',
24
    past: 'il y a %s',
25
    s: 'quelques secondes',
26
    m: 'une minute',
27
    mm: '%d minutes',
28
    h: 'une heure',
29
    hh: '%d heures',
30
    d: 'un jour',
31
    dd: '%d jours',
32
    M: 'un mois',
33
    MM: '%d mois',
34
    y: 'une année',
35
    yy: '%d années'
36
  },
37
  ordinal: function (number) {
38
    return number + (number === 1 ? 'er' : 'ème');
39
  },
40
  week: {
41
    dow: 1, // Понедельник - первый день недели.
42
    doy: 4 // Неделя, которая содержит 4 января - первая неделя года.
43
  }
44
});
45
 
46
moment.lang('fr');
47
console.log(moment(1316116057189).fromNow()); // il y a une heure
48
moment.lang('en');
49
console.log(moment(1316116057189).fromNow()); // an hour ago

Работаем с JavaScript-датами используя Moment.js
Работаем с JavaScript-датами используя Moment.js

Манипуляции с датами в JavaScript являются непростой задачей как для новичков, так и для более опытных разработчиков. Библиотека Moment.js позволяет значительно упростить работу JavaScript-программистам.

Moment.js - это проект с открытым исходным кодом, позволяет упростить проверки, синтаксический анализ и обработку дат на стороне клиента. В этом уроке я приведу несколько примеров применения этой полезной JavaScript-библиотеки.

Что такое Moment.js?
Moment.js избавляет от необходимости использовать родной JavaScript-объект Date напрямую. Библиотека является оболочкой для объекта Date (таким же образом, как jQuery является оболочкой для JavaScript), что позволяет значительно проще работать с объектом.

Проблема объекта Date не функциональность, он чрезвычайно громоздкий при использования разработчиками. Если вы хотите сделать сложный разбор, проверку и отображение даты, вам в конечном итоге придется писать много кода.

Moment.js также расширяет встроенные возможности JavaScript для работы с датами различными функциями, например, относительное время, календарное время, длительность и многоязыковая поддержка. Она также имеет широкий список плагинов, которые выполняют дополнительные функции, такие как поддержка часового пояса, интеграции с Twitter и многие другие.

Использование Moment.js
Для начала вам нужно скачать Moment.js и подключить его в вашем HTML-документе. Вы также можете найти библиотеку на cdnjs.com (CDN для проектов с открытым кодом). Просто воспользуйтесь поиском в библиотеке, используя термин "moment.js".

После того как мы подключили библиотеку Moment.js, нам нужно убедиться, что она работает правильно, для этого мы собираемся создать экземпляр объекта moment и объект JavaScript Date, а затем выведем их значения на экран.

Ниже показано, как ссылаться на библиотеку Moment.js в ваших HTML-документах, а также как создать экземпляр и отображения значений объекта moment и объекта Date.

<!DOCTYPE html>
<html>
<head>
  <!-- ссылка на Moment.js library -->
  <script src="//cdnjs.cloudflare.com/ajax/libs/moment.js/2.7.0/moment.min.js" type="text/javascript"></script>
</head>
<body></p>
<p><h2>Moment Date</h2>
<!-- контейнер для вывода дат при помощи Moment.js -->
<div id="displayMoment"></div></p>
<p><h2>JavaScript Date</h2>
<!-- контейнер для вывода дат при помощи JavaScript Date -->
<div id="displayJsDate"></div></p>
<p><script type="text/javascript">
(function()
{
  // экземпляр объекта moment 
  var NowMoment = moment();
  
  // экземпляр объекта JavaScript Date 
  var NowDate = new Date();
  
  // вывод значения объекта moment в #displayMoment div
  var eDisplayMoment = document.getElementById('displayMoment');
  eDisplayMoment.innerHTML = NowMoment;
  
  // вывод значения объекта Date в #displayJsDate div
  var eDisplayDate = document.getElementById('displayJsDate');
  eDisplayDate.innerHTML = NowDate;
})();
</script></p>
<p></body>
</html>
Демо-пример №1

На данный момент, объем кода для обоих объектов одинаков.

Форматирование даты
Разница между объектом moment и объектом Date быстро становится очевидной, когда мы хотим вывести даже простую, удобочитаемую дату в формате ‘Y-m-d' (например, '2014-7-1').

Использование JavaScript объекта Date:

// Использование JavaScript объекта <em>Date</em> для текущей даты в div (#displayJsDate)
var NowDate = new Date();
var months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];
var sDay = NowDate.getDate();
var sMonth = NowDate.getMonth() + 1;
var sYear = NowDate.getFullYear();
var eDisplayDate = document.getElementById('displayJsDate');
eDisplayDate.innerHTML = sYear+'-'+sMonth+'-'+sDay;
Moment.js делает наш код более компактным.

// use Moment.js to display current date in a div (#displayMoment)
var NowMoment = moment();
var eDisplayMoment = document.getElementById('displayMoment');
eDisplayMoment.innerHTML = NowMoment.format('YYYY-M-D');
Демо-пример №2

Обратите внимание, что при использовании Moment.js нам понадобилось всего лишь вызвать функцию format() и передать ей строку 'YYYY-M-D' в качестве аргумента. Строка определяет формат даты, который нам необходим. Сайт Moment.js имеет множество вариантов формата даты, которые удобно перечислены в виде таблицы здесь: http://momentjs.com/docs/#/displaying/format/

Теперь, когда мы познакомились с процессом отображения и форматирования текущей даты, давайте двигаться дальше.

Парсинг даты
Объект moment принимает строковый параметр и создает объект Date для указанной даты.

<h2>Вывод даты</h2>
<div id="output"></div>

<script type="text/javascript">
(function()
{
  var Date = moment('July 1, 2014');
  var eDisplayMoment = document.getElementById('output');
  // вывод даты в нужном формате
  eDisplayMoment.innerHTML = Date.format('YYYY-M-D');
})();
</script>
Одна деталь, которую следует отметить, тут нет стандарта, которого браузеры должны придерживаться при разборе даты. К счастью, библиотека Moment.js предоставляет дополнительные параметры, которые позволяют нам указать точный шаблон, чтобы помочь нам избежать несоответствий.

Для соответствия во всех браузерах и платформах, приведенный выше код должен быть проанализирован как указано ниже.

<h2>Ввод даты</h2>
<div id="input">July 1, 2014</div>

<h2>Вывод даты</h2>
<div id="output"></div>

<script type="text/javascript">
(function()
{
  // получаем дату из #input div element
  var input = document.getElementById('input').innerHTML;
  
  // используем функцию moment() с двумя параметрами: датой и шаблоном
  var Date = moment(input, 'MMMM D, YYYY');
  
  //вывод преобразованной даты в div (#output)
  var eDisplayMoment = document.getElementById('output');
  eDisplayMoment.innerHTML = Date.format('YYYY-M-D');
})();
</script>
Демо-пример №3

На сайте Moment.js есть таблица, содержащая доступные параметры, которые можно использовать для обработки дат: http://momentjs.com/docs/#/parsing/string-format/

Хотя даты редко вводят вручную, важно знать что мы на самом деле обрабатываем значение даты.

Рассмотрим ввод '2014-14-14 '- это невозможная дата. В этом случае функция moment() будет возвращать строку 'Invalid Date' при попытке обработать её.

Однако, есть и другие инструменты доступные нам для обнаружения и исправления недействительных значений даты.

Обнаружение неправильных дат
Для обнаружения неверных дат Moment.js предоставляет нам метод isValid(). Он возвращает простое булево значение (true или false), что позволяет нам определить следующий порядок действий в логике нашего кода, в случае если значение даты не является допустимым.

Другой метод обнаружения невалидных дат - invalidAt(). Этот метод является более специфичным, он скажет нам, где наш дата является невалидной. Он будет возвращать целое число от 0 до 6, значения которых могут быть найдены в следующей таблице.

Число	Место ошибки
0	Years
1	Months
2	Days
3	Hours
4	Minutes
5	Seconds
6	Milliseconds
Так, в примере '2014-14-14 ', функция invalidAt() вернет 1, потому что 14 является некорректным значением для месяца (только 1-12 валидные значения). 

Исправление неправильных дат
Что делать когда вам необходимо исправить неверную дату? Если вы еще не работали с датами раньше, это может поставить вас в тупик. Однако, Moment.js и здесь нам поможет.

Часто мы просим людей ввести даты и, несмотря на все наши усилия и кричащие всплывающие подсказки с просьбой ввести их в определенном формате, например, "D/M/Y", они игнорируют наши инструкции и вводят "M/D/Y".

Мы можем вернуться к разбору дат, который мы сделали раньше и добавить второй параметр разбора (у вас может их быть больше, чем два варианта), передав в массив строки различных возможных форматов даты в качестве запасного варианта.

Давайте используем дату "1 января 2014" как пример. Мы введем 14/1/2014 и 1/14/2014, а ожидаемый ввод D/M/YYYY.

<h2>Ввод дат</h2>
<div id="input1">14/1/2014</div>
<div id="input2">1/14/2014</div>

<h2>Вывод дат (1 формат)</h2>

<div id="output1"></div>
<div id="output2"></div>

<h2>Вывод (множество форматов)</h2>
<div id="output3"></div>
<div id="output4"></div>

<script type="text/javascript">
(function()
{
  var correct = document.getElementById('input1').innerHTML;
  var incorrect = document.getElementById('input2').innerHTML;
  
  var Date1 = moment(correct, 'D/M/YYYY');
  document.getElementById('output1').innerHTML = Date1.format('MMMM D, YYYY');
  
  var Date2 = moment(incorrect, 'D/M/YYYY');
  // будет выведено 'Invalid Date' в #output2 потому что формат некорректный
  document.getElementById('output2').innerHTML = Date2.format('MMMM D, YYYY');

  var Date3 = moment(correct, ['D/M/YYYY','M/D/YYYY']);
  document.getElementById('output3').innerHTML = Date3.format('MMMM D, YYYY');

  // попробуем обработать дату используя два потенциально возможных формата
  var Date4 = moment(incorrect, ['D/M/YYYY','M/D/YYYY']);
  // будет выведен правильный формат даты
  document.getElementById('output4').innerHTML = Date4.format('MMMM D, YYYY');
})();
</script>
Демо-пример №4

Вы обратили внимание, что при одном строковом аргументе, если формат не совпадает, вы получите "Invalid Date". Однако, если вы передадите массив форматов в качестве аргумента, то первый вариант, который cработает, будет использоваться.

Сложение и вычитание дат
Одна из моих любимых функций в библиотеке Moment.js - это удобные методы для манипуляции с датами, такие как .add() и .subtract().

Например:

// текущая дата
var Date = moment();

// добавляем 7 дней к текущей дате
document.getElementById('currDatePlus7d').innerHTML = Date.add('days', 7);

// вычетаем 8 часов от текущей даты
document.getElementById('currDateSub8h').innerHTML = Date.subtract('hours', 8);

// добавляем 5 лет и 3 месяца к текущей дате
document.getElementById('currDatePlus8h').innerHTML = Date.add({years: 5, months: 3});
Демо-пример №5

Библиотека Moment.js выполняет подобные операции очень корректно. Например, с помощью нативного JavaScript объекта Date, добавив один месяц к 31 августа мы получим 1 октября. Эта же операция, выполняемая Moment.js, будет правильно возвращать 30 сентября.

Заключение
Moment.js является отличным и полезным инструментом, если вы регулярно работаете с датами на стороне клиента, для обработки, форматирования и проверки дат. Чтобы увидеть исходный код проекта смотрите его репозиторий GitHub. Чтобы узнать больше о её особенностях, изучите официальную документацию.

Перевод статьи с http://sixrevisions.com
